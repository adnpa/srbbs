// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"srbbs/src/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCommunity(db *gorm.DB, opts ...gen.DOOption) community {
	_community := community{}

	_community.communityDo.UseDB(db, opts...)
	_community.communityDo.UseModel(&model.Community{})

	tableName := _community.communityDo.TableName()
	_community.ALL = field.NewAsterisk(tableName)
	_community.ID = field.NewInt32(tableName, "id")
	_community.CommunityID = field.NewInt32(tableName, "community_id")
	_community.CommunityName = field.NewString(tableName, "community_name")
	_community.Introduction = field.NewString(tableName, "introduction")
	_community.CreatedAt = field.NewTime(tableName, "created_at")
	_community.UpdatedAt = field.NewTime(tableName, "updated_at")
	_community.DeletedAt = field.NewField(tableName, "deleted_at")

	_community.fillFieldMap()

	return _community
}

type community struct {
	communityDo

	ALL           field.Asterisk
	ID            field.Int32
	CommunityID   field.Int32
	CommunityName field.String
	Introduction  field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (c community) Table(newTableName string) *community {
	c.communityDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c community) As(alias string) *community {
	c.communityDo.DO = *(c.communityDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *community) updateTableName(table string) *community {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.CommunityID = field.NewInt32(table, "community_id")
	c.CommunityName = field.NewString(table, "community_name")
	c.Introduction = field.NewString(table, "introduction")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *community) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *community) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["community_id"] = c.CommunityID
	c.fieldMap["community_name"] = c.CommunityName
	c.fieldMap["introduction"] = c.Introduction
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c community) clone(db *gorm.DB) community {
	c.communityDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c community) replaceDB(db *gorm.DB) community {
	c.communityDo.ReplaceDB(db)
	return c
}

type communityDo struct{ gen.DO }

type ICommunityDo interface {
	gen.SubQuery
	Debug() ICommunityDo
	WithContext(ctx context.Context) ICommunityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICommunityDo
	WriteDB() ICommunityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICommunityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICommunityDo
	Not(conds ...gen.Condition) ICommunityDo
	Or(conds ...gen.Condition) ICommunityDo
	Select(conds ...field.Expr) ICommunityDo
	Where(conds ...gen.Condition) ICommunityDo
	Order(conds ...field.Expr) ICommunityDo
	Distinct(cols ...field.Expr) ICommunityDo
	Omit(cols ...field.Expr) ICommunityDo
	Join(table schema.Tabler, on ...field.Expr) ICommunityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICommunityDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICommunityDo
	Group(cols ...field.Expr) ICommunityDo
	Having(conds ...gen.Condition) ICommunityDo
	Limit(limit int) ICommunityDo
	Offset(offset int) ICommunityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunityDo
	Unscoped() ICommunityDo
	Create(values ...*model.Community) error
	CreateInBatches(values []*model.Community, batchSize int) error
	Save(values ...*model.Community) error
	First() (*model.Community, error)
	Take() (*model.Community, error)
	Last() (*model.Community, error)
	Find() ([]*model.Community, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Community, err error)
	FindInBatches(result *[]*model.Community, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Community) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICommunityDo
	Assign(attrs ...field.AssignExpr) ICommunityDo
	Joins(fields ...field.RelationField) ICommunityDo
	Preload(fields ...field.RelationField) ICommunityDo
	FirstOrInit() (*model.Community, error)
	FirstOrCreate() (*model.Community, error)
	FindByPage(offset int, limit int) (result []*model.Community, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICommunityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c communityDo) Debug() ICommunityDo {
	return c.withDO(c.DO.Debug())
}

func (c communityDo) WithContext(ctx context.Context) ICommunityDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c communityDo) ReadDB() ICommunityDo {
	return c.Clauses(dbresolver.Read)
}

func (c communityDo) WriteDB() ICommunityDo {
	return c.Clauses(dbresolver.Write)
}

func (c communityDo) Session(config *gorm.Session) ICommunityDo {
	return c.withDO(c.DO.Session(config))
}

func (c communityDo) Clauses(conds ...clause.Expression) ICommunityDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c communityDo) Returning(value interface{}, columns ...string) ICommunityDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c communityDo) Not(conds ...gen.Condition) ICommunityDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c communityDo) Or(conds ...gen.Condition) ICommunityDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c communityDo) Select(conds ...field.Expr) ICommunityDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c communityDo) Where(conds ...gen.Condition) ICommunityDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c communityDo) Order(conds ...field.Expr) ICommunityDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c communityDo) Distinct(cols ...field.Expr) ICommunityDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c communityDo) Omit(cols ...field.Expr) ICommunityDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c communityDo) Join(table schema.Tabler, on ...field.Expr) ICommunityDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c communityDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICommunityDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c communityDo) RightJoin(table schema.Tabler, on ...field.Expr) ICommunityDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c communityDo) Group(cols ...field.Expr) ICommunityDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c communityDo) Having(conds ...gen.Condition) ICommunityDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c communityDo) Limit(limit int) ICommunityDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c communityDo) Offset(offset int) ICommunityDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c communityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICommunityDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c communityDo) Unscoped() ICommunityDo {
	return c.withDO(c.DO.Unscoped())
}

func (c communityDo) Create(values ...*model.Community) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c communityDo) CreateInBatches(values []*model.Community, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c communityDo) Save(values ...*model.Community) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c communityDo) First() (*model.Community, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Community), nil
	}
}

func (c communityDo) Take() (*model.Community, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Community), nil
	}
}

func (c communityDo) Last() (*model.Community, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Community), nil
	}
}

func (c communityDo) Find() ([]*model.Community, error) {
	result, err := c.DO.Find()
	return result.([]*model.Community), err
}

func (c communityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Community, err error) {
	buf := make([]*model.Community, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c communityDo) FindInBatches(result *[]*model.Community, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c communityDo) Attrs(attrs ...field.AssignExpr) ICommunityDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c communityDo) Assign(attrs ...field.AssignExpr) ICommunityDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c communityDo) Joins(fields ...field.RelationField) ICommunityDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c communityDo) Preload(fields ...field.RelationField) ICommunityDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c communityDo) FirstOrInit() (*model.Community, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Community), nil
	}
}

func (c communityDo) FirstOrCreate() (*model.Community, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Community), nil
	}
}

func (c communityDo) FindByPage(offset int, limit int) (result []*model.Community, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c communityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c communityDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c communityDo) Delete(models ...*model.Community) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *communityDo) withDO(do gen.Dao) *communityDo {
	c.DO = *do.(*gen.DO)
	return c
}
